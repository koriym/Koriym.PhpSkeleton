<?xml version="1.0" encoding="UTF-8"?>

<project name="Php.Skeleton" default="build">
    <property name="composer.path" value="${basedir}/composer.phar" />
    <available property="composer.exists" file="${composer.path}" />

    <target name="build" depends="require, prepare, test, report"/>
    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpcb"/>
    <target name="test" depends="lint,phpunit"/>
    <target name="report" depends="phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpcb,apigen,phpdox"/>

    <target name="require" depends="composer" description="Install QA tools">
        <exec executable="php">
            <arg value="composer.phar" />
            <arg value="global" />
            <arg value="require" />
            <arg value="--dev" />
            <arg value="phpunit/phpunit=*" />
            <arg value="squizlabs/php_codesniffer:*" />
            <arg value="phpmd/phpmd:*" />
            <arg value="h4cc/phpqatools:*" />
            <arg value="apigen/apigen:*" />
            <arg value="theseer/fxsl:dev-master" />
            <arg value="theseer/phpdox:dev-master" />
            <arg value="phploc/phploc:*" />
            <arg value="fabpot/php-cs-fixer:*" />
        </exec>
    </target>

    <target name="pear" description="Install QA tools by PEAR">
        <!-- auto-discover channels -->
        <exec executable="pear">
            <arg value="config-set"/>
            <arg value="auto_discover"/>
            <arg value="1" />
        </exec>

        <exec executable="pear">
            <arg value="install" />
            <arg value="--alldeps" />
            <arg value="pear.phpqatools.org/phpqatools" />
            <arg value="pear.netpirates.net/phpDox-alpha" />
            <arg value="pear.apigen.org/apigen" />
        </exec>
    </target>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/docblox"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
    </target>

    <target name="prepare" depends="clean, vendor" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/docblox"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
    </target>

    <target name="vendor" description="Load composer repositories" depends="composer">
        <exec executable="${composer.path}" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="composer" description="Download composer" unless="composer.exists">
        <get src="http://getcomposer.org/composer.phar" dest="${composer.path}" />
        <chmod file="${composer.path}" perm="775" />
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${basedir}/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="${basedir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=${basedir}/phpcs.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/phpcs.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true"/>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${basedir}/build/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${basedir}/build/code-browser" />
        </exec>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <exec executable="phpdox"/>
    </target>

    <target name="apigen" description="Generate API documentation using ApiGen">
        <exec executable="apigen">
            <arg line="--source src --destination ${basedir}/build/apin" />
        </exec>
    </target>

</project>
